package dijkstra;

import java.util.Arrays;

public class DijkstraAlgorithm {

	public static void main(String[] args) {
		
		char[] vertex = {'A','B','C','D','E','F','G'};
		//邻接矩阵
		int[][] matrix = new int[vertex.length][vertex.length];
		final int N = 65535;//表示不可以连接
		matrix[0] = new int[]{N,5,7,N,N,N,2};  
		matrix[1] = new int[]{5,N,N,9,N,N,3};  
		matrix[2] = new int[]{7,N,N,N,8,N,N};  
		matrix[3] = new int[]{N,9,N,N,N,4,N};  
		matrix[4] = new int[]{N,N,8,N,N,5,4};  
		matrix[5] = new int[]{N,N,N,4,5,N,6};  
		matrix[6] = new int[]{2,3,N,N,4,6,N};
		
		//创建Graph对象
		Graph graph = new Graph(vertex,matrix);
		//测试
		graph.showGraph();
		
		//测试dsj
		graph.dsj(6);
		

	}

}
class Graph {
	private char[] vertex;//顶点数组
	private int[][] matrix;//邻接矩阵
	private Visited_vertex vv;//已经访问结点的集合
	
	public Graph(char[] vertex,int[][] matrix) {
		this.vertex = vertex;
		this.matrix = matrix;
		
	}
	
	//显示图
	public void showGraph() {
		for(int[] link:matrix) {
			System.out.println(Arrays.toString(link));
		}
	}
	
	//迪杰斯塔拉算法实现
	/**
	 * 
	 * @param index 表示出发结点对应的下标
	 */
	public void dsj(int index) {
		 vv = new Visited_vertex(vertex.length,index);
		 update(index);//更新index下标顶点到周围顶点的距离和前驱顶点
	}
	
	//更新下标顶点到周围顶点的距离和周围顶点的前驱结点
	private void update(int index) {
		int len = 0;
		for(int j = 0;j<matrix[index].length;j++) {
			//len含义：出发顶点到index顶点的距离+ index顶点到j顶点距离的和
			len = vv.getDis(index)+matrix[index][j];
			//如果j顶点没有被访问过，并且len小于出发顶点到j顶点的距离，就需要更新
			if(!vv.in(j) &&len<vv.getDis(j)) {
				vv.updatePre(j,index);//更新j顶点的前驱为index这个顶点
				vv.updateDis(j,len);//更新出发顶点到j的距离
				
			}
		}
	}
	
	
	
	
}

//已访问顶点集合
class Visited_vertex {
	// 记录各个顶点是否访问过 1表示访问过,0未访问,会动态更新
	public int[] already_arr; 
	// 每个下标对应的值为前一个顶点下标, 会动态更新
	public int[] pre_visited;
	// 记录出发顶点到其他所有顶点的距离,比如G为出发顶点，就会记录G到其它顶点的距离，会动态更新，求的最短距离就会存放到dis
	public int[] dis;
	
	//构造器
	/**
	 * 
	 * @param length  表示顶点的个数
	 * @param index	  出发顶点对应的个数
	 */
	public Visited_vertex(int length,int index) {
		this.already_arr = new int[length];
		this.pre_visited = new int[length];
		this.dis =  new int[length];
		
		//初始化dis数组
		Arrays.fill(dis,65535);
		this.already_arr[index] = 1;//设置出发顶点被访问过
		this.dis[index] = 0;//设置出发顶点的访问距离为0
		
	}
	
	/**
	 * 功能：判断index结点是够访问过
	 * 
	 * @param index
	 * @return  如果访问过，就返回ture，否则false
	 */
	public boolean in(int index) {
		return already_arr[index] ==1;
	}
	
	/**
	 * 功能：更新出发结点到index结点的距离
	 * @param index
	 * @param len
	 */
	public void updateDis(int index,int len) {
		dis[index] = len;
	}
	
	/**
	 * 功能：更新结点的前驱为index结点
	 * @param pre
	 * @param index
	 */
	public void updatePre(int pre,int index) {
		pre_visited[pre] = index;
	}
	
	/**
	 * 功能：返回出发结点到index结点的距离
	 * @param index
	 * @return
	 */
	public int getDis(int index) {
		return dis[index];
	}

}
